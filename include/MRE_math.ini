#define MRE_SET_VEC4_VEC3S( v, s, dest )\
({                          \
  (dest)[0] = (v)[0];       \
  (dest)[1] = (v)[1];       \
  (dest)[2] = (v)[2];       \
  (dest)[3] = (s);          \
})
#define MRE_SET_VEC4( x, y, z, w, dest )\
({                          \
  (dest)[0] = (x);          \
  (dest)[1] = (y);          \
  (dest)[2] = (z);          \
  (dest)[3] = (w);          \
})
#define MRE_SET_VEC3( x, y, z, dest )\
({                          \
  (dest)[0] = (x);          \
  (dest)[1] = (y);          \
  (dest)[2] = (z);          \
})
#define MRE_SET_VEC2( x, y, dest )\
({                          \
  (dest)[0] = (x);          \
  (dest)[1] = (y);          \
})
#define MRE_COPY_VEC4( v, dest )\
({                          \
  (dest)[0] = (v)[0];       \
  (dest)[1] = (v)[1];       \
  (dest)[2] = (v)[2];       \
  (dest)[3] = (v)[3];       \
})
#define MRE_COPY_VEC3( v, dest )\
({                          \
  (dest)[0] = (v)[0];       \
  (dest)[1] = (v)[1];       \
  (dest)[2] = (v)[2];       \
})
#define MRE_ADD_VEC4( v1, v2, dest )\
({                              \
  (dest)[0] = (v1)[0] + (v2)[0];\
  (dest)[1] = (v1)[1] + (v2)[1];\
  (dest)[2] = (v1)[2] + (v2)[2];\
  (dest)[3] = (v1)[3] + (v2)[3];\
})
#define MRE_ADD_VEC4_S( v, s, dest )\
({                          \
  (dest)[0] = (v)[0] + (s); \
  (dest)[1] = (v)[1] + (s); \
  (dest)[2] = (v)[2] + (s); \
  (dest)[3] = (v)[3] + (s); \
})
#define MRE_SUB_VEC4( v1, v2, dest )\
({                                \
  (dest)[0] = (v1)[0] - (v2)[0];  \
  (dest)[1] = (v1)[1] - (v2)[1];  \
  (dest)[2] = (v1)[2] - (v2)[2];  \
  (dest)[3] = (v1)[3] - (v2)[3];  \
})
#define MRE_DIV_VEC4_S( v, s, dest )\
({                          \
  (dest)[0] = (v)[0] / (s); \
  (dest)[1] = (v)[1] / (s); \
  (dest)[2] = (v)[2] / (s); \
  (dest)[3] = (v)[3] / (s); \
})
#define MRE_ADD_VEC3_S( v, s, dest )\
({                          \
  (dest)[0] = (v)[0] + (s); \
  (dest)[1] = (v)[1] + (s); \
  (dest)[2] = (v)[2] + (s); \
})
#define MRE_SUB_VEC3( v1, v2, dest )\
({                              \
  (dest)[0] = (v1)[0] - (v2)[0];\
  (dest)[1] = (v1)[1] - (v2)[1];\
  (dest)[2] = (v1)[2] - (v2)[2];\
})
#define MRE_DIV_VEC3_S( v, s, dest )\
({                          \
  (dest)[0] = (v)[0] / (s); \
  (dest)[1] = (v)[1] / (s); \
  (dest)[2] = (v)[2] / (s); \
})
#define MRE_SCMUL_VEC3( v1, v2 )\
(                           \
  (v1)[0] * (v2)[0] +       \
  (v1)[1] * (v2)[1] +       \
  (v1)[2] * (v2)[2]         \
)
#define MRE_SCMUL_VEC2( v1, v2 )\
(                           \
  (v1)[0] * (v2)[0] +       \
  (v1)[1] * (v2)[1]         \
)
#define MRE_DET2_M( m )\
(                           \
  (m)[0][0]*(m)[1][1]       \
  -                         \
  (m)[0][1]*(m)[1][0]       \
)
#define MRE_DET2_S( m00, m01, m10, m11 )\
(                           \
  (m00)*(m11) - (m01)*(m10) \
)
#define MRE_DET3_M( m )\
(                           \
  (m)[0][0] * MRE_DET2_S(   \
    (m)[1][1], (m)[1][2],   \
    (m)[2][1], (m)[2][2]    \
  )                         \
  -                         \
  (m)[0][1] * MRE_DET2_S(   \
    (m)[1][0], (m)[1][2],   \
    (m)[2][0], (m)[2][2]    \
  )                         \
  +                         \
  (m)[0][2] * MRE_DET2_S(   \
    (m)[1][0], (m)[1][1],   \
    (m)[2][0], (m)[2][1]    \
  )                         \
)
#define MRE_DET3_S( m00, m01, m02, m10, m11, m12, m20, m21, m22 )\
(                           \
  (m00 )* MRE_DET2_S(       \
    (m11), (m12),           \
    (m21), (m22)            \
  )                         \
  -                         \
  (m01) * MRE_DET2_S(       \
    (m10), (m12),           \
    (m20), (m22)            \
  )                         \
  +                         \
  (m02) * MRE_DET2_S(       \
    (m10), (m11),           \
    (m20), (m21)            \
  )                         \
)

#define MRE_POW2( x )\
(                           \
  (x)*(x)                   \
)

#define MRE_POINTS_DIST2( p1, p2 )\
(                               \
  MRE_POW2((p1)[0] - (p2)[0]) + \
  MRE_POW2((p1)[1] - (p2)[1]) + \
  MRE_POW2((p1)[2] - (p2)[2])   \
)

#define MRE_VEC3_LENGTH( v )\
(                               \
  sqrt( MRE_SCMUL_VEC3( v, v ) )\
)

#define MRE_PLANE_DIST( point, plane )\
(                           \
  (plane)[0] * (point)[0]   \
  +                         \
  (plane)[1] * (point)[1]   \
  +                         \
  (plane)[2] * (point)[2]   \
  +                         \
  (plane)[3]                \
)

#define MRE_IS_POINT_IN_SPHERE( point, sphere )\
(                                                               \
  MRE_POINTS_DIST2( point, sphere ) <= (sphere)[3] + MRE_F64_MIN\
)

#define MRE_VEC3_COEFF( v1, v2, t, d )\
({                                               \
  (d)[0] = (v1)[0] + ( (v2)[0] - (v1)[0] ) * (t);\
  (d)[1] = (v1)[1] + ( (v2)[1] - (v1)[1] ) * (t);\
  (d)[2] = (v1)[2] + ( (v2)[2] - (v1)[2] ) * (t);\
})

#define MRE_VEC3_COEFF_2( v1, t1, v2, t2, d )\
({                                               \
  (d)[0] = (t1)*(v1)[0] + (t2)*(v2)[0];          \
  (d)[1] = (t1)*(v1)[1] + (t2)*(v2)[1];          \
  (d)[2] = (t1)*(v1)[2] + (t2)*(v2)[2];          \
})
